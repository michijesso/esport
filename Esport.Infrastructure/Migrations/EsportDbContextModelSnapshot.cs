// <auto-generated />
using System;
using Esport.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Esport.Infrastructure.Migrations
{
    [DbContext(typeof(EsportDbContext))]
    partial class EsportDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Esport.Domain.Models.EsportEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Championship")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("championship");

                    b.Property<string>("Esport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("esport");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("League")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("league");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("esport_events", "public");
                });

            modelBuilder.Entity("Esport.Domain.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentScore")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("current_score");

                    b.Property<int>("MarketId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("events", "public");
                });

            modelBuilder.Entity("Esport.Domain.Models.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("markets", "public");
                });

            modelBuilder.Entity("Esport.Domain.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("participants", "public");
                });

            modelBuilder.Entity("Esport.Domain.Models.Selection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MarketId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Odds")
                        .HasColumnType("double precision")
                        .HasColumnName("odds");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("selections", "public");
                });

            modelBuilder.Entity("Esport.Domain.Models.EsportEvent", b =>
                {
                    b.HasOne("Esport.Domain.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Esport.Domain.Models.Event", b =>
                {
                    b.HasOne("Esport.Domain.Models.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");
                });

            modelBuilder.Entity("Esport.Domain.Models.Participant", b =>
                {
                    b.HasOne("Esport.Domain.Models.Event", null)
                        .WithMany("Participants")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("Esport.Domain.Models.Selection", b =>
                {
                    b.HasOne("Esport.Domain.Models.Market", null)
                        .WithMany("Selections")
                        .HasForeignKey("MarketId");
                });

            modelBuilder.Entity("Esport.Domain.Models.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Esport.Domain.Models.Market", b =>
                {
                    b.Navigation("Selections");
                });
#pragma warning restore 612, 618
        }
    }
}
